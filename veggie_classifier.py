# -*- coding: utf-8 -*-
"""Veggie_Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17AVDiDamyoCEqwLqI_j70CkhqqDc4ijM
"""

import streamlit as st
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
import cv2

def main():
    # set up the Streamlit app
    st.set_page_config(page_title="Veggie_Classifer", page_icon="ü•í")
    st.write("Creator:")
    st.write("Airo Craven G. Cornillez")
    st.title("ü•ï üçÖ  VeggieClassifier ü•îü•¶")
    st.write("This web application is designed to identify different types of vegetables such as bean, bitter gourd, bottle gourd, brinjal, broccoli, cabbage, capsicum, carrot, cauliflower, cucumber, papaya, potato, pumpkin, radish or tomato.")
    st.write("This app can only predict the vegetables available in the market.")
   
    @st.cache_resource
    def load_model():
        model = tf.keras.models.load_model("VeggieClassifier.hdf5")
        return model
    
    def import_and_predict(image_data, model):
        size=(150,150)
        image = ImageOps.fit(image_data,size, Image.LANCZOS)
        image = np.asarray(image)
        image = image / 255.0
        img_reshape = np.reshape(image, (1, 150, 150, 3))
        prediction = model.predict(img_reshape)
        return prediction

    model = load_model()
    class_names = ["Bean", "Bitter Gourd", "Bottle Gourd", 
                   "Brinjal", "Brocolli", "Cabbage", 
                   "Capsicum", "Carrot", "Cauliflower", 
                   "Cucumber", "Papaya", "Potato", 
                   "Pumpkin", "Radish", "Tomato"]
    

    file = st.file_uploader("Please upload an intact picture of a vegetable (without any chopping or slicing).", type=["jpg", "png", "jpeg", "webp"])

    if file is None:
        st.text("Upload a vegetable image available in our market")
    else:
        image = Image.open(file)
        st.image(image, use_column_width=True)
        prediction = import_and_predict(image, model)
        class_index = np.argmax(prediction)
        class_name = class_names[class_index]
        string = "This vegetable is a " + class_name + "üòä"
        st.success(string)
 
if __name__ == "__main__":
    main()
